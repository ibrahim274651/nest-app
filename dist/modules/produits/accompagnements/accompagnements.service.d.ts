import { Model } from 'mongoose';
import { CreateAccompagnementDto } from './dto/create-accompagnement.dto';
import { UpdateAccompagnementDto } from './dto/update-accompagnement.dto';
import { Accompagnement } from './entities/accompagnement.entity';
import { PageOptionsDto } from 'src/helpers/page-options-dto/page-options-dto';
import { FabricationService } from '../fabrication/fabrication.service';
import { CatalogueService } from '../catalogue/catalogue.service';
import { CategoriesService } from '../categories/categories.service';
import { ResponseI18nService } from 'src/helpers/translate/server-response/response-i18n.service';
import { FilterStockDto } from 'src/common/filter/filter.dto';
import { TarrificationService } from 'src/settings/bases/tarrification/tarrification.service';
import { AppHelperService } from 'src/helpers/app.helper.service';
import { TvaService } from 'src/settings/bases/tva/tva.service';
export declare class AccompagnementsService {
    private readonly addOnModel;
    private readonly referenceService;
    private readonly tarificationService;
    private readonly categoriesService;
    private readonly catalogueService;
    private readonly fabricationService;
    private readonly tvaService;
    private readonly responseI18nService;
    private readonly appHelperService;
    private readonly logger;
    constructor(addOnModel: Model<Accompagnement>, referenceService: AppHelperService, tarificationService: TarrificationService, categoriesService: CategoriesService, catalogueService: CatalogueService, fabricationService: FabricationService, tvaService: TvaService, responseI18nService: ResponseI18nService, appHelperService: AppHelperService);
    create(dataDto: CreateAccompagnementDto): Promise<any>;
    findAll(filterStockDto: FilterStockDto, pageOptionsDto: PageOptionsDto): Promise<any>;
    findOne(id: string): Promise<any>;
    update(id: string, dataDto: UpdateAccompagnementDto): Promise<any>;
    remove(id: string): Promise<any>;
    validateAccompagnements(accompagnements?: string[]): Promise<any[]>;
    private beforeCreateOrUpdate;
    private formatAddonsData;
}
